(()=>{"use strict";const n="localhost"===window.location.hostname?{API_URL:"http://localhost:3000/",FRONTEND_URL:"http://localhost:8080/",NODE_ENV:"development",URL_PREFIX:"/"}:{API_URL:"https://finance-tracker-backend-zbxuhg7gpq-as.a.run.app",FRONTEND_URL:"https://salismt.github.io/finance-tracker-frontend",NODE_ENV:"production",URL_PREFIX:"/finance-tracker-frontend/"},e=new class{constructor(){this.isAuthenticated=!1,this.profile=null,this.token=null,this.onAuthChange=null}loginWithGoogle(n){this.isAuthenticated=!0,this.token=n.getAuthResponse().id_token,this.profile=n.getBasicProfile(),this._notifyAuthChange()}logout(){this.isAuthenticated=!1,this.profile=null,this.token=null,"function"==typeof this.onAuthChange&&this.onAuthChange()}_notifyAuthChange(){this.onAuthChange&&this.onAuthChange()}fetchProfileData(){return{name:this.profile?this.profile.getName():"",email:this.profile?this.profile.getEmail():""}}};async function t(e){e.preventDefault();const t=document.getElementById("email").value,a=document.getElementById("password").value;try{const e=await axios.post(`${n.API_URL}login`,{email:t,password:a});sessionStorage.setItem("token",e.data.token),console.log("Logged in successfully"),page.redirect(`${n.URL_PREFIX}profile`)}catch(n){console.error("Login failed:",n),document.getElementById("login-error").textContent="Failed to login"}}async function a(e){e.preventDefault();const t=document.getElementById("name").value,a=document.getElementById("email").value,o=document.getElementById("password").value;try{const e=await axios.post(`${n.API_URL}signup`,{name:t,email:a,password:o});console.log("Signup successful",e),page.redirect(`${n.URL_PREFIX}login`)}catch(n){console.error("Signup failed:",n),document.getElementById("signup-error").textContent="Failed to sign up"}}const o="development"===n.NODE_ENV;function i(){if(o)return Promise.resolve({category:[{key:"food"},{key:"transport"}]}.categories);if(!e.isAuthenticated)throw new Error("User is not authenticated.");return axios.get(`${n.API_URL}/api/categories`,{headers:{Authorization:`Bearer ${e.token}`}}).then((n=>n.data.categories)).catch((n=>(console.error("Failed to fetch categories",n),[])))}const s=class{constructor(n){this.transactionModal=n,this.nav=document.getElementById("nav"),this.setupNavbar(),e.onAuthChange=this.setupNavbar.bind(this)}setupNavbar(){this.nav&&(e.isAuthenticated?(this.nav.innerHTML='\n                <nav class="vertical-navbar">\n                    <a href="/" class="nav-item">\n                        <img src="../icons/home.png" alt="Home" class="nav-icon"/>\n                    </a>\n                    <a href="/profile" class="nav-item">\n                        <img src="../icons/user.png" alt="Profile" class="nav-icon"/>\n                    </a>\n                    <a href="/transactions" class="nav-item">\n                        <img src="../icons/file.png" alt="Transactions" class="nav-icon"/>\n                    </a>\n                    <a href="#" onclick="this.onLogout(); return false;" class="nav-item">\n                        <img src="../icons/logout.png" alt="Logout" class="nav-icon"/>\n                    </a>\n                    <button id="add-transaction-btn" class="nav-item">\n                        <img src="../icons/plus.png" alt="Add Transaction" class="nav-icon"/>\n                    </button>\n                </nav>\n            ',document.getElementById("add-transaction-btn").addEventListener("click",(()=>this.transactionModal.open()))):this.nav.innerHTML='\n                <nav class="vertical-navbar">\n                    <a href="/login" class="nav-item">\n                        <img src="../icons/login.png" alt="Login" class="nav-icon"/>\n                    </a>\n                    <a href="/signup" class="nav-item">\n                        <img src="../icons/signup.png" alt="Signup" class="nav-icon"/>\n                    </a>\n                </nav>\n\n            ')}onLogout(){this.setupNavbar()}};class r{constructor(){this.modal=document.getElementById("transaction-modal"),this.setupModal()}setupModal(){this.form=document.getElementById("transaction-form"),this.form?(this.closeButton=document.getElementById("close-button"),this.closeButton.addEventListener("click",(()=>this.close())),this.form.addEventListener("submit",(n=>this.submit(n))),this.populateCategories()):console.error("Transaction form is not available.")}open(){this.modal&&(this.modal.style.display="block")}close(){this.modal&&(this.modal.style.display="none")}submit(n){n.preventDefault();const e=new FormData(this.form);console.log("Transaction data submitted:",Object.fromEntries(e.entries())),this.close()}populateCategories(){i().then((n=>{const e=this.form.elements.category;n.forEach((n=>{const t=document.createElement("option");t.value=n.id,t.textContent=n.name,e.appendChild(t)}))})).catch((n=>console.error("Failed to fetch categories:",n)))}}function l(){e.isAuthenticated?(document.getElementById("app").innerHTML='\n    <div id="dashboard" class="dashboard">\n      <div class="dashboard-item">\n        <span>Current Balance</span>\n        <div class="amount-box">$<span id="current-balance">Loading...</span></div>\n      </div>\n      <div class="dashboard-item">\n        <span>Total Expense</span>\n        <div class="amount-box">$<span id="total-expense">Loading...</span></div>\n      </div>\n      <div class="dashboard-item">\n        <span>Total Income</span>\n        <div class="amount-box">$<span id="total-income">Loading...</span></div>\n      </div>\n      <div class="dashboard-item full-width">\n        <span>Balance History</span>\n        <div id="balance-history" class="chart"></div>\n      </div>\n      <div class="dashboard-item full-width">\n        <span>Categories</span>\n        <div id="categories-chart" class="chart"></div>\n      </div>\n      <div class="dashboard-item full-width">\n        <span>Statements</span>\n        <div id="last-transactions">Loading...</div>\n      </div>\n    </div>\n\n    \x3c!-- Input Transaction Modal --\x3e\n  <div id="transaction-modal" class="modal">\n    <div class="modal-content">\n      <span class="close-button" id="close-button">&times;</span>\n      <h2>Input Transaction</h2>\n      <form id="transaction-form">\n        <label for="transaction-name">Transaction Name</label>\n        <input type="text" id="transaction-name" name="transaction-name" required>\n\n        <label for="category">Category</label>\n        <select id="category" name="category">\n          \x3c!-- Categories options will be populated dynamically --\x3e\n        </select>\n\n        <label for="transaction-date">Date of Transaction</label>\n        <input type="date" id="transaction-date" name="transaction-date" required>\n\n        <label for="amount">Amount</label>\n        <input type="number" id="amount" name="amount" step="0.01" required>\n\n        <label for="type">Type</label>\n        <select id="type" name="type">\n          <option value="Debit">Debit</option>\n          <option value="Credit">Credit</option>\n        </select>\n\n        <button type="submit">Submit</button>\n      </form>\n    </div>\n  </div>\n  ',function(){if(o)return Promise.resolve({data:{current_balance:1e4,total_expense:5e3,total_income:15e3,balance_history:[{date:"2024-01-15T00:00:00+00:00",balance:7e3},{date:"2024-01-16T00:00:00+00:00",balance:8e3}],categories:[{percentage:30.5,name:"food"},{percentage:16,name:"transport"}],statements:[{name:"mcdonald",category:"food",date:"2020-12-09T16:09:53+00:00",currency:"IDR",amount:300,type:"expense"}]}});if(!e.isAuthenticated)throw new Error("User is not authenticated.");axios.get(`${n.API_URL}/api/dashboard`,{headers:{Authorization:`Bearer ${e.token}`}}).then((n=>{const e=n.data;document.getElementById("current-balance").textContent=e.current_balance.toFixed(2),document.getElementById("total-expense").textContent=e.total_expense.toFixed(2),document.getElementById("total-income").textContent=e.total_income.toFixed(2)})).catch((n=>console.error("Failed to fetch current balance",n)))}()):document.getElementById("app").innerHTML="<h1>Home Page</h1><p>Welcome to our finance tracker.</p>"}function c(){const n=document.getElementById("app");n.innerHTML="<h1>Categories</h1><div>Loading categories...</div>",i().then((e=>{const t=e.map((n=>`<li>${n.name}</li>`)).join("");n.innerHTML=`<h1>Categories</h1><ul>${t}</ul>`}))}function d(){document.getElementById("app").innerHTML='\n    <div class="transactions-page">\n      <h1 class="page-title">Statement</h1>\n      <div class="transaction-filters">\n        <input type="search" placeholder="Search" class="transaction-search" />\n        <select class="time-frame-select">\n          <option value="1">1 Month</option>\n          <option value="3">3 Months</option>\n          <option value="6">6 Months</option>\n          <option value="12">1 Year</option>\n        </select>\n      </div>\n      <div id="transactions-list" class="transactions-list">\n        \x3c!-- Transactions will be dynamically inserted here --\x3e\n      </div>\n    </div>\n  ',function(){if(o)return Promise.resolve([{name:"mcdonald",category:"food",date:"2020-12-09T16:09:53+00:00",currency:"IDR",amount:300,type:"expense"},{name:"mcdonald",category:"food",date:"2020-12-09T16:09:53+00:00",currency:"IDR",amount:300,type:"expense"}]);axios.get(`${n.API_URL}/api/transactions`,{headers:{Authorization:`Bearer ${e.token}`}}).then((n=>{const e=n.data.transactions;document.getElementById("transactions-list").innerHTML=e.map((n=>`\n        <div class="transaction-item">\n          <span class="transaction-description">${n.description}</span>\n          <span class="transaction-date">${new Date(n.date).toLocaleDateString()}</span>\n          <span class="transaction-category">${n.category}</span>\n          <span class="transaction-amount">$${n.amount.toFixed(2)}</span>\n        </div>\n      `)).join("")})).catch((n=>{console.error("Failed to fetch transactions",n)}))}()}function p(){document.getElementById("app").innerHTML='\n    <h1>Login</h1>\n    <form id="login-form">\n      <label for="email">Email:</label>\n      <input type="email" id="email" name="email" required>\n      <label for="password">Password:</label>\n      <input type="password" id="password" name="password" required>\n      <button type="submit">Login</button>\n    </form>\n    <div id="login-error"></div>\n  ',document.getElementById("login-form").addEventListener("submit",t)}function m(){document.getElementById("app").innerHTML='\n    <h1>Sign Up</h1>\n    <form id="signup-form">\n      <label for="name">Name:</label>\n      <input type="text" id="name" name="name" required>\n      <label for="email">Email:</label>\n      <input type="email" id="email" name="email" required>\n      <label for="password">Password:</label>\n      <input type="password" id="password" name="password" required>\n      <button type="submit">Sign Up</button>\n    </form>\n    <div id="signup-error"></div>\n  ',document.getElementById("signup-form").addEventListener("submit",a)}function u(){if(!e.isAuthenticated)return void page.redirect(`${n.URL_PREFIX}login`);const t=e.fetchProfileData();document.getElementById("app").innerHTML=`\n    <div class="profile-container">\n      <h2 class="profile-title">Profile</h2>\n      <div class="profile-info">\n        <img src="${t.getImageUrl()}" alt="Profile Image" class="profile-image">\n        <p class="profile-name">${t.getName()}</p>\n        <p class="profile-email">${t.getEmail()}</p>\n      </div>\n      <div class="balance-info">\n        <h3>Balance</h3>\n        <p class="balance-amount">$<span id="profile-balance">220</span></p>\n      </div>\n    </div>\n  `}document.addEventListener("DOMContentLoaded",(function(){var t=document.createElement("base");t.href="localhost"===window.location.hostname?"/":"/finance-tracker-frontend/",document.head.prepend(t);const a=new r,o=new s(a);page("/",l),page("/categories",c),page("/transactions",d),page("/login",p),page("/signup",m),page("/profile",u),page("/logout",function(t){axios.post(`${n.API_URL}api/logout`,{},{headers:{Authorization:`Bearer ${e.token}`}}).finally((()=>{t.onLogout(),e.logout(),sessionStorage.removeItem("isAuthenticated"),sessionStorage.removeItem("token"),page.redirect(`${n.URL_PREFIX}login`)}))}(o)),page()}))})();